// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogAPI.Migrations
{
    [DbContext(typeof(BlogPostDbContext))]
    [Migration("20241010202949_IntitalMigration")]
    partial class IntitalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogAPI.BlogUser", b =>
                {
                    b.Property<Guid>("UserGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserGuid");

                    b.ToTable("BlogUsers");
                });

            modelBuilder.Entity("BlogAPI.Models.BlogAuthor", b =>
                {
                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserGuid", "BlogGuid");

                    b.HasIndex("BlogGuid");

                    b.ToTable("BlogAuthors");
                });

            modelBuilder.Entity("BlogAPI.Models.BlogPost", b =>
                {
                    b.Property<Guid>("BlogGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("BlogAPI.Models.BlogAuthor", b =>
                {
                    b.HasOne("BlogAPI.Models.BlogPost", "BlogPost")
                        .WithMany("BlogAuthors")
                        .HasForeignKey("BlogGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAPI.BlogUser", "BlogUser")
                        .WithMany("BlogAuthors")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("BlogUser");
                });

            modelBuilder.Entity("BlogAPI.Models.BlogPost", b =>
                {
                    b.HasOne("BlogAPI.BlogUser", "BlogCreator")
                        .WithMany("BlogPosts")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCreator");
                });

            modelBuilder.Entity("BlogAPI.BlogUser", b =>
                {
                    b.Navigation("BlogAuthors");

                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("BlogAPI.Models.BlogPost", b =>
                {
                    b.Navigation("BlogAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
